This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-08T20:58:27.372Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
jsconfig.json
LICENSE
next.config.mjs
package.json
postcss.config.mjs
README.md
src/app/admin/page.js
src/app/api/contact/route.js
src/app/api/netlify-projects/route.js
src/app/api/og/route.js
src/app/api/projects/[id]/route.js
src/app/api/projects/route.js
src/app/api/users/route.js
src/app/dashboard/[customerId]/page.js
src/app/dashboard/page.js
src/app/globals.css
src/app/layout.js
src/app/login/page.js
src/app/netlify-projects/page.js
src/app/page.js
src/app/projects/page.js
src/components/AddProjectModal.js
src/components/AdminNav.js
src/components/AdminRoute.js
src/components/Contact.js
src/components/Education.js
src/components/Experience.js
src/components/Footer.js
src/components/Header.js
src/components/Hero.js
src/components/ImportProjectModal.js
src/components/NetlifyProjects.js
src/components/new/Background.js
src/components/new/FAQ.js
src/components/new/landing.js
src/components/ProjectCard.js
src/components/Projects.js
src/components/ProtectedRoute.js
src/components/Skills.js
src/components/ToggleTheme.js
src/components/UserProjects.js
src/context/AuthContext.js
src/context/ThemeContext.js
src/data/projectData.json
src/firebase/firebaseAdmin.js
src/firebase/firebaseConfig.js
src/firebase/projectOperations.js
src/middleware.js
src/utils/adminUtils.js
tailwind.config.js
text.txt

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Irving Jose Duran

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['d33wubrfki0l68.cloudfront.net'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '*.cloudfront.net',
        port: '',
        pathname: '/**',
      },
    ],
  },
  // Add this rewrites section
  async rewrites() {
    return [
      {
        source: "/.netlify/functions/:path*",
        destination:
          "https://your-site-name.netlify.app/.netlify/functions/:path*",
      },
    ];
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@vercel/og": "^0.6.5",
    "firebase": "^10.14.0",
    "firebase-admin": "^12.6.0",
    "lucide-react": "^0.475.0",
    "next": "14.2.13",
    "nodemailer": "^6.10.0",
    "react": "^18",
    "react-dom": "^18",
    "three": "^0.173.0"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "14.2.13",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: src/app/admin/page.js
================
"use client";
import { useState, useEffect } from "react";
import AdminRoute from "../../components/AdminRoute";
import AdminNav from "../../components/AdminNav";
import { useTheme } from "../../context/ThemeContext";
import { useAuth } from "../../context/AuthContext";
import Link from "next/link";

export default function AdminPanel() {
  const { isDarkMode } = useTheme();
  const { user } = useAuth();
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchUsers = async () => {
      if (user) {
        try {
          setLoading(true);
          const token = await user.getIdToken();
          const response = await fetch("/api/users", {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || "Failed to fetch users");
          }
          const data = await response.json();
          setUsers(data.users);
        } catch (err) {
          console.error("Error fetching users:", err);
          setError(err.message);
        } finally {
          setLoading(false);
        }
      }
    };

    fetchUsers();
  }, [user]);

  return (
    <AdminRoute>
      <div
        className={`min-h-screen ${
          isDarkMode ? "bg-gray-900 text-gray-100" : "bg-gray-100 text-gray-900"
        }`}
      >
        <AdminNav />
        <div className="container mx-auto px-4 py-8">
          <h1 className="text-3xl font-bold mb-6">Admin Panel</h1>

          {loading && (
            <div
              className={`p-4 rounded-md ${
                isDarkMode ? "bg-gray-800" : "bg-white"
              } shadow`}
            >
              <p className="text-center">Loading users...</p>
            </div>
          )}

          {error && (
            <div className="p-4 bg-red-100 border border-red-400 text-red-700 rounded-md mb-4">
              <p>Error: {error}</p>
            </div>
          )}

          {!loading && !error && (
            <div
              className={`overflow-hidden rounded-lg shadow ${
                isDarkMode ? "bg-gray-800" : "bg-white"
              }`}
            >
              <div className="px-4 py-5 sm:px-6">
                <h2 className="text-xl font-semibold">User List</h2>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className={isDarkMode ? "bg-gray-700" : "bg-gray-50"}>
                    <tr>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                      >
                        Email
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                      >
                        Display Name
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                      >
                        Created At
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                      >
                        Last Sign In
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                      >
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody
                    className={`divide-y ${
                      isDarkMode ? "divide-gray-700" : "divide-gray-200"
                    }`}
                  >
                    {users.map((user) => (
                      <tr
                        key={user.uid}
                        className={
                          isDarkMode ? "hover:bg-gray-700" : "hover:bg-gray-50"
                        }
                      >
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          {user.email}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          {user.displayName || "N/A"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          {new Date(user.creationTime).toLocaleString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          {new Date(user.lastSignInTime).toLocaleString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <Link href={`/dashboard/${user.uid}`}>
                            <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
                              View Dashboard
                            </button>
                          </Link>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>
      </div>
    </AdminRoute>
  );
}

================
File: src/app/api/contact/route.js
================
// src/app/api/contact/route.js
import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

// Create reusable transporter object using SMTP transport
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_APP_PASSWORD,
  },
});

export async function POST(request) {
  try {
    const { name, email, message } = await request.json();

    // Input validation
    if (!name || !email || !message) {
      return NextResponse.json(
        { error: "Name, email, and message are required" },
        { status: 400 }
      );
    }

    // Email template
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_USER, // Where you want to receive the contact form submissions
      subject: `New Contact Form Submission from ${name}`,
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">New Contact Form Submission</h2>
          <p><strong>Name:</strong> ${name}</p>
          <p><strong>Email:</strong> ${email}</p>
          <h3 style="color: #666;">Message:</h3>
          <p style="background-color: #f5f5f5; padding: 15px; border-radius: 5px;">${message}</p>
          <hr style="border: 1px solid #eee; margin: 20px 0;">
          <p style="color: #666; font-size: 12px;">This email was sent from your website's contact form.</p>
        </div>
      `,
    };

    // Send email
    await transporter.sendMail(mailOptions);

    return NextResponse.json({
      message: "Email sent successfully",
      success: true,
    });
  } catch (error) {
    console.error("Error sending email:", error);
    return NextResponse.json(
      { error: "Failed to send email" },
      { status: 500 }
    );
  }
}

export const runtime = "nodejs";

================
File: src/app/api/netlify-projects/route.js
================
import { NextResponse } from "next/server";
import blankImage from "@/data/images/06dc8dda360a79a8ec50.webp";
export async function GET() {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

  try {
    const response = await fetch("https://api.netlify.com/api/v1/sites", {
      headers: {
        Authorization: `Bearer ${process.env.NETLIFY_ACCESS_TOKEN}`,
      },
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error("Failed to fetch projects from Netlify");
    }

    const data = await response.json();

    const projects = data.map((site) => ({
      id: site.id,
      name: site.name,
      url: site.url,
      screenshot: site.screenshot_url || blankImage,
      repo_url: site.build_settings?.repo_url,
      repo_path: site.build_settings?.repo_path,
      admin_url: site.admin_url,
      created_at: site.created_at,
      updated_at: site.updated_at,
      framework: site.published_deploy?.framework,
      branch: site.published_deploy?.branch,
      deploy_url: site.deploy_url,
    }));

    return NextResponse.json(projects);
  } catch (error) {
    if (error.name === "AbortError") {
      console.error("Request timed out");
      return NextResponse.json({ error: "Request timed out" }, { status: 504 });
    }
    console.error("Error fetching Netlify projects:", error);
    return NextResponse.json(
      { error: "Failed to fetch projects" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/og/route.js
================
// src/app/api/og/route.js
import { ImageResponse } from "@vercel/og";

export const runtime = "edge";

export async function GET() {
  return new ImageResponse(
    (
      <div
        style={{
          height: "100%",
          width: "100%",
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          backgroundColor: "black",
          padding: "40px",
        }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <h1
            style={{
              fontSize: 60,
              fontWeight: 700,
              color: "white",
              marginBottom: 20,
            }}
          >
            Irving Jose Duran
          </h1>
          <p
            style={{
              fontSize: 30,
              color: "white",
              opacity: 0.8,
              marginBottom: 10,
            }}
          >
            Full Stack Engineer
          </p>
          <p
            style={{
              fontSize: 24,
              color: "white",
              opacity: 0.6,
            }}
          >
            Brooklyn, New York
          </p>
        </div>
      </div>
    ),
    {
      width: 1200,
      height: 630,
    }
  );
}

================
File: src/app/api/projects/[id]/route.js
================
// src/app/api/projects/[id]/route.js
import { NextResponse } from "next/server";
import admin from "../../../../firebase/firebaseAdmin";

export async function DELETE(request, { params }) {
  const userId = request.headers.get("X-User-ID");
  const { id } = params;

  if (!userId) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    const db = admin.database();
    const projectRef = db.ref(`projects/${userId}/${id}`);
    const snapshot = await projectRef.once("value");

    if (!snapshot.exists()) {
      return NextResponse.json({ error: "Project not found" }, { status: 404 });
    }

    await projectRef.remove();
    return NextResponse.json({ message: "Project deleted successfully" });
  } catch (error) {
    console.error("Error deleting project:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/projects/route.js
================
// src/app/api/projects/route.js
import { NextResponse } from "next/server";
import admin from "../../../firebase/firebaseAdmin";

export async function POST(request) {
  console.log("POST request received");
  const userId = request.headers.get("X-User-ID");
  if (!userId) {
    console.log("Unauthorized: No X-User-ID header");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    console.log("Parsing request body");
    const { name, description, hostedUrl, githubUrl } = await request.json();
    console.log("Request body:", { name, description, hostedUrl, githubUrl });

    console.log("Initializing database");
    const db = admin.database();
    console.log("Database initialized");

    console.log("Creating new project reference");
    const newProjectRef = db.ref(`projects/${userId}`).push();
    console.log("New project reference created");

    console.log("Setting project data");
    await newProjectRef.set({
      name,
      description,
      hostedUrl,
      githubUrl,
      createdAt: admin.database.ServerValue.TIMESTAMP,
    });
    console.log("Project data set successfully");

    return NextResponse.json({ id: newProjectRef.key }, { status: 201 });
  } catch (error) {
    console.error("Error adding project:", error);
    return NextResponse.json(
      { error: "Internal server error", details: error.message },
      { status: 500 }
    );
  }
}

================
File: src/app/api/users/route.js
================
// src/app/api/users/route.js
import { NextResponse } from "next/server";
import admin from "../../../firebase/firebaseAdmin";
import { isAdmin } from "../../../utils/adminUtils";

export async function GET(request) {
  console.log("API route accessed");

  // Get the user's session token from the request headers
  const sessionToken = request.headers
    .get("Authorization")
    ?.split("Bearer ")[1];

  if (!sessionToken) {
    console.log("No authentication token provided");
    return NextResponse.json(
      { error: "No authentication token provided" },
      { status: 401 }
    );
  }

  try {
    console.log("Verifying session token");
    // Verify the session token and get the user
    const decodedToken = await admin.auth().verifyIdToken(sessionToken);
    console.log("Token verified, fetching user");
    const user = await admin.auth().getUser(decodedToken.uid);

    console.log("Checking if user is admin");
    // Check if the user is an admin
    if (!isAdmin(user)) {
      console.log("User is not an admin");
      return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
    }

    console.log("Fetching all users");
    // Fetch all users
    const listUsersResult = await admin.auth().listUsers();
    const users = listUsersResult.users.map((userRecord) => ({
      uid: userRecord.uid,
      email: userRecord.email,
      displayName: userRecord.displayName,
      photoURL: userRecord.photoURL,
      creationTime: userRecord.metadata.creationTime,
      lastSignInTime: userRecord.metadata.lastSignInTime,
    }));

    console.log("Successfully fetched users");
    return NextResponse.json({ users });
  } catch (error) {
    console.error("Error in API route:", error);
    return NextResponse.json(
      { error: "Internal server error", details: error.message },
      { status: 500 }
    );
  }
}

================
File: src/app/dashboard/[customerId]/page.js
================
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "../../../context/AuthContext";
import { useTheme } from "../../../context/ThemeContext";
import { database } from "../../../firebase/firebaseConfig";
import { ref, onValue, off } from "firebase/database";
import AdminRoute from "../../../components/AdminRoute";
import ToggleTheme from "../../../components/ToggleTheme";
import AddProjectModal from "../../../components/AddProjectModal";
import ImportProjectModal from "../../../components/ImportProjectModal";
import ProjectCard from "../../../components/ProjectCard";
import AdminNav from "../../../components/AdminNav";

export default function CustomerDashboard({ params }) {
  const { user, isAdmin } = useAuth();
  const { isDarkMode } = useTheme();
  const [projects, setProjects] = useState([]);
  const [currentProject, setCurrentProject] = useState(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isImportModalOpen, setIsImportModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { customerId } = params;

  useEffect(() => {
    console.log("CustomerDashboard useEffect", { user, isAdmin, customerId });

    if (user && isAdmin) {
      const projectsRef = ref(database, `projects/${customerId}`);
      console.log("Projects ref created", projectsRef.toString());

      setLoading(true);
      setError(null);

      const unsubscribe = onValue(
        projectsRef,
        (snapshot) => {
          setLoading(false);
          if (snapshot.exists()) {
            const projectsData = snapshot.val();
            console.log("Projects data fetched", projectsData);
            const projectsList = Object.entries(projectsData).map(
              ([id, data]) => ({
                id,
                ...data,
              })
            );
            setProjects(projectsList);
            console.log("Projects state updated", projectsList);
          } else {
            console.log("No projects found for this customer");
            setProjects([]);
          }
        },
        (error) => {
          setLoading(false);
          setError("Failed to fetch projects. Please try again later.");
          console.error("Error fetching projects:", error);
        }
      );

      return () => {
        console.log("Unsubscribing from projects listener");
        off(projectsRef);
      };
    }
  }, [user, isAdmin, customerId]);

  const handleDeleteProject = (projectId) => {
    console.log("handleDeleteProject called", { projectId });
    setProjects((prevProjects) => {
      const updatedProjects = prevProjects.filter(
        (project) => project.id !== projectId
      );
      console.log("Updated projects state", updatedProjects);
      return updatedProjects;
    });
  };

  return (
    <AdminRoute>
      <div
        className={`min-h-screen ${
          isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-800"
        }`}
      >
        <AdminNav />
        <div className="container mx-auto px-4 py-8">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-3xl font-bold">
              Customer Dashboard: {customerId}
            </h1>
            <div>
              <button
                onClick={() => setIsAddModalOpen(true)}
                className="mr-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
              >
                Add New Project
              </button>
              <button
                onClick={() => setIsImportModalOpen(true)}
                className="mr-4 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
              >
                Import Project
              </button>
              <ToggleTheme />
            </div>
          </div>

          {loading && <p>Loading projects...</p>}
          {error && <p className="text-red-500">{error}</p>}

          {!loading && !error && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {projects.map((project) => (
                <ProjectCard
                  key={project.id}
                  project={project}
                  customerId={customerId}
                  onDelete={handleDeleteProject}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      <AddProjectModal
        isOpen={isAddModalOpen}
        onClose={() => {
          setIsAddModalOpen(false);
          setCurrentProject(null);
        }}
        project={currentProject}
        customerId={customerId}
      />

      <ImportProjectModal
        isOpen={isImportModalOpen}
        onClose={() => setIsImportModalOpen(false)}
        customerId={customerId}
      />
    </AdminRoute>
  );
}

================
File: src/app/dashboard/page.js
================
"use client";
import { useState, useEffect } from "react";
import { useAuth } from "../../context/AuthContext";
import { useTheme } from "../../context/ThemeContext";
import { signOut } from "firebase/auth";
import { auth, database } from "../../firebase/firebaseConfig";
import { ref, onValue, remove } from "firebase/database";
import ProtectedRoute from "../../components/ProtectedRoute";
import AddProjectModal from "../../components/AddProjectModal";
import { useRouter } from "next/navigation";
import Link from "next/link";
import ToggleTheme from "../../components/ToggleTheme";
import AdminNav from "../../components/AdminNav";
import ProjectCard from "../../components/ProjectCard";

export default function Dashboard() {
  const { user, isAdmin } = useAuth();
  const { isDarkMode } = useTheme();
  const [projects, setProjects] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentProject, setCurrentProject] = useState(null);
  const router = useRouter();

  useEffect(() => {
    if (user) {
      const projectsRef = ref(database, `projects/${user.uid}`);
      const unsubscribe = onValue(projectsRef, (snapshot) => {
        const data = snapshot.val();
        const projectList = data
          ? Object.entries(data).map(([id, value]) => ({ id, ...value }))
          : [];
        setProjects(projectList);
      });

      return () => unsubscribe();
    }
  }, [user]);

  const handleSignOut = async () => {
    try {
      await signOut(auth);
      router.push("/login");
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  const handleEditProject = (project) => {
    setCurrentProject(project);
    setIsModalOpen(true);
  };

  const handleDeleteProject = async (projectId) => {
    if (window.confirm("Are you sure you want to delete this project?")) {
      try {
        await remove(ref(database, `projects/${user.uid}/${projectId}`));
      } catch (error) {
        console.error("Error deleting project:", error);
      }
    }
  };

  return (
    <ProtectedRoute>
      <div
        className={`min-h-screen ${
          isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-800"
        }`}
      >
        {isAdmin && <AdminNav />}

        <div className="container mx-auto px-4 py-8">
          {isAdmin && (
            <div
              className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-8 flex justify-between items-center"
              role="alert"
            >
              <div>
                <p className="font-bold">Admin Access</p>
                <p>You have administrative privileges.</p>
              </div>
              <Link href="/admin">
                <button className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors">
                  Go to Admin Panel
                </button>
              </Link>
            </div>
          )}
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-3xl font-bold">
              Welcome, {user?.displayName || user?.email}!
            </h1>
            <div>
              <button
                onClick={() => {
                  setCurrentProject(null);
                  setIsModalOpen(true);
                }}
                className="mr-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
              >
                Add New Project
              </button>
              <ToggleTheme />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map((project) => (
              <ProjectCard
                key={project.id}
                project={project}
                handleEditProject={handleEditProject}
              />
            ))}
          </div>

          {projects.length === 0 && (
            <div className="text-center py-12">
              <p className="text-xl">
                You haven&apos;t added any projects yet.
              </p>
              <p className="mt-2">
                Click the &quot;Add New Project&quot; button to get started!
              </p>
            </div>
          )}

          <button
            onClick={handleSignOut}
            className="mt-8 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
          >
            Sign Out
          </button>
        </div>
      </div>

      <AddProjectModal
        isOpen={isModalOpen}
        onClose={() => {
          setIsModalOpen(false);
          setCurrentProject(null);
        }}
        project={currentProject}
        onDelete={handleDeleteProject}
      />
    </ProtectedRoute>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

================
File: src/app/layout.js
================
// src/app/layout.js
import { ThemeProvider } from "../context/ThemeContext";
import { AuthProvider } from "../context/AuthContext";
import "./globals.css";

export const metadata = {
  metadataBase: new URL("https://duranirving.com"), // Update with your domain
  title: {
    default: "Irving Jose Duran | Full Stack Engineer",
    template: "%s | Irving Jose Duran",
  },
  description:
    "Full Stack Engineer specializing in Next.js, React, Node.js, and modern web technologies. Based in Brooklyn, NY.",
  keywords: [
    "Irving Jose Duran",
    "Full Stack Engineer",
    "Web Developer",
    "Software Engineer",
    "React Developer",
    "Next.js Developer",
    "Brooklyn",
    "New York",
    "Frontend Development",
    "Backend Development",
    "JavaScript",
    "TypeScript",
    "Node.js",
    "Portfolio",
    "Japan"
  ],
  authors: [{ name: "Irving Jose Duran" }],
  creator: "Irving Jose Duran",
  publisher: "Irving Jose Duran",
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  openGraph: {
    type: "website",
    locale: "en_US",
    url: "https://duranirving.com",
    siteName: "Irving Jose Duran",
    title: "Irving Jose Duran | Full Stack Engineer",
    description:
      "Full Stack Engineer specializing in Next.js, React, Node.js, and modern web technologies. Based in Brooklyn, NY.",
    images: [
      {
        url: "/api/og", // Make sure to create and add this image
        width: 1200,
        height: 630,
        alt: "Irving Jose Duran - Full Stack Engineer",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "Irving Jose Duran | Full Stack Engineer",
    description:
      "Full Stack Engineer specializing in Next.js, React, Node.js, and modern web technologies. Based in Brooklyn, NY.",
    images: ["/api/og"], // Same image as OG
    creator: "@fixmylifenyc", // Update with your Twitter handle if you have one
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
  // verification: {
  //   google: "your-google-verification-code", // Add if you have Google Search Console verification
  //   // Add other verification codes as needed
  // },
  alternates: {
    canonical: "https://duranirving.com",
  },
};
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <ThemeProvider>
        <AuthProvider>
          <body>{children}</body>
        </AuthProvider>
      </ThemeProvider>
    </html>
  );
}

================
File: src/app/login/page.js
================
// src/app/login/page.js
"use client";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  signInWithPopup,
  GoogleAuthProvider,
  FacebookAuthProvider,
  GithubAuthProvider,
  signInWithEmailAndPassword,
  onAuthStateChanged
} from "firebase/auth";
import { auth } from "../../firebase/firebaseConfig";
import { useTheme } from "../../context/ThemeContext";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(true);
  const { isDarkMode } = useTheme();
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        router.push("/dashboard");
      } else {
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, [router]);

  const signIn = async (provider) => {
    try {
      await signInWithPopup(auth, provider);
      router.push("/dashboard");
    } catch (error) {
      console.error("Error signing in:", error);
      // TODO: Add user-friendly error handling
    }
  };

  const handleEmailSignIn = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      router.push("/dashboard");
    } catch (error) {
      console.error("Error signing in with email:", error);
      // TODO: Add user-friendly error handling
    }
  };

  if (loading) {
    return <div>Loading...</div>; // Consider replacing with a proper loading component
  }

  return (
    <div
      className={`min-h-screen flex items-center justify-center ${
        isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-800"
      }`}
    >
      <div
        className={`max-w-md w-full space-y-8 p-10 ${
          isDarkMode ? "bg-gray-800" : "bg-white"
        } rounded-xl shadow-md`}
      >
        <h2 className="mt-6 text-center text-3xl font-extrabold">
          Sign in to your account
        </h2>
        <form className="mt-8 space-y-6" onSubmit={handleEmailSignIn}>
          <input
            type="email"
            required
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
            placeholder="Email address"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            type="password"
            required
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <button
            type="submit"
            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Sign in
          </button>
        </form>
        <div className="mt-6">
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span
                className={`px-2 ${
                  isDarkMode
                    ? "bg-gray-800 text-white"
                    : "bg-white text-gray-500"
                }`}
              >
                Or continue with
              </span>
            </div>
          </div>
          <div className="mt-6 grid grid-cols-3 gap-3">
            <button
              onClick={() => signIn(new GoogleAuthProvider())}
              className="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
            >
              <span className="sr-only">Sign in with Google</span>
              <svg
                className="w-5 h-5"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z" />
              </svg>
            </button>
            <button
              onClick={() => signIn(new FacebookAuthProvider())}
              className="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
            >
              <span className="sr-only">Sign in with Facebook</span>
              <svg
                className="w-5 h-5"
                fill="currentColor"
                viewBox="0 0 20 20"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M20 10c0-5.523-4.477-10-10-10S0 4.477 0 10c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V10h2.54V7.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V10h2.773l-.443 2.89h-2.33v6.988C16.343 19.128 20 14.991 20 10z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
            <button
              onClick={() => signIn(new GithubAuthProvider())}
              className="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
            >
              <span className="sr-only">Sign in with GitHub</span>
              <svg
                className="w-5 h-5"
                fill="currentColor"
                viewBox="0 0 20 20"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/netlify-projects/page.js
================
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "../../context/AuthContext";
import { useTheme } from "../../context/ThemeContext";
import AdminRoute from "../../components/AdminRoute";
import AdminNav from "../../components/AdminNav";
import NetlifyProjects from "../../components/NetlifyProjects";

export default function NetlifyProjectsPage() {
  const { isAdmin } = useAuth();
  const { isDarkMode } = useTheme();
  const router = useRouter();

  useEffect(() => {
    if (!isAdmin) {
      router.push("/dashboard");
    }
  }, [isAdmin, router]);

  return (
    <AdminRoute>
      <div
        className={`min-h-screen ${
          isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-800"
        }`}
      >
        <AdminNav />
        <div className="container mx-auto px-6 py-8">
          <h1 className="text-3xl font-bold mb-6">
            Netlify Projects (Admin Only)
          </h1>
          <NetlifyProjects />
        </div>
      </div>
    </AdminRoute>
  );
}

================
File: src/app/page.js
================
"use client";
// import { useTheme } from "../context/ThemeContext";
// import Header from "../components/Header";
// import Hero from "../components/Hero";
// import Projects from "../components/Projects";
// import Skills from "../components/Skills";
// import Experience from "../components/Experience";
// import Education from "../components/Education";
// import Contact from "../components/Contact";
// import Footer from "../components/Footer";
import Portfolio from "../components/new/landing";

export default function Home() {
  // const { isDarkMode } = useTheme();

  return <Portfolio />;
}

================
File: src/app/projects/page.js
================
"use client";
import { useTheme } from "../../context/ThemeContext";
import Header from "../../components/Header";
import Projects from "../../components/Projects";
import Footer from "../../components/Footer";

export default function ProjectsPage() {
  const { isDarkMode } = useTheme();

  return (
    <div
      className={`min-h-screen ${
        isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-800"
      }`}
    >
      <Header />
      <main>
        <Projects />
      </main>
      <Footer />
    </div>
  );
}

================
File: src/components/AddProjectModal.js
================
// src/components/AddProjectModal.js
import React, { useState, useEffect } from "react";
import { useAuth } from "../context/AuthContext";
import { database } from "../firebase/firebaseConfig";
import { ref, push, set, update } from "firebase/database";
import { useTheme } from "../context/ThemeContext";

export default function AddProjectModal({
  isOpen,
  onClose,
  project,
  onDelete,
  customerId,
}) {
  const { user, isAdmin } = useAuth();
  const { isDarkMode } = useTheme();
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [hostedUrl, setHostedUrl] = useState("");
  const [githubUrl, setGithubUrl] = useState("");
  const [githubRepoName, setGithubRepoName] = useState("");

  useEffect(() => {
    if (project) {
      setName(project.name || "");
      setDescription(project.description || "");
      setHostedUrl(project.hostedUrl || "");
      setGithubUrl(project.githubUrl || "");
      setGithubRepoName(project.githubRepoName || "");
    } else {
      setName("");
      setDescription("");
      setHostedUrl("");
      setGithubUrl("");
      setGithubRepoName("");
    }
  }, [project]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!user) return;

    const projectData = {
      name,
      description,
      hostedUrl,
      githubUrl,
      githubRepoName,
      customerId: customerId || (project ? project.customerId : null),
      updatedAt: new Date().toISOString(),
    };

    try {
      if (project) {
        // Update existing project
        await update(
          ref(database, `projects/${project.userId || user.uid}/${project.id}`),
          projectData
        );
      } else {
        // Add new project
        const newProjectRef = push(
          ref(
            database,
            `projects/${isAdmin && customerId ? customerId : user.uid}`
          )
        );
        await set(newProjectRef, {
          ...projectData,
          createdAt: new Date().toISOString(),
        });
      }

      onClose();
      alert(
        project
          ? "Project updated successfully!"
          : "Project added successfully!"
      );
    } catch (error) {
      console.error("Error saving project:", error);
      alert("Error saving project. Please try again.");
    }
  };

  const handleDelete = () => {
    if (project && onDelete) {
      onDelete(project.id, project.userId || user.uid);
      onClose();
    }
  };

  if (!isOpen) return null;

  const inputClassName =
    "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 text-black bg-white";

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div
        className={`w-full max-w-md p-6 rounded-lg ${
          isDarkMode ? "bg-gray-800" : "bg-white"
        }`}
      >
        <h2
          className={`text-2xl font-bold mb-4 ${
            isDarkMode ? "text-white" : "text-gray-800"
          }`}
        >
          {project ? "Edit Project" : "Add New Project"}
        </h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label
              htmlFor="name"
              className={`block text-sm font-medium ${
                isDarkMode ? "text-gray-200" : "text-gray-700"
              }`}
            >
              Project Name*
            </label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              className={inputClassName}
            />
          </div>
          <div>
            <label
              htmlFor="description"
              className={`block text-sm font-medium ${
                isDarkMode ? "text-gray-200" : "text-gray-700"
              }`}
            >
              Description
            </label>
            <textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              className={inputClassName}
            ></textarea>
          </div>
          <div>
            <label
              htmlFor="hostedUrl"
              className={`block text-sm font-medium ${
                isDarkMode ? "text-gray-200" : "text-gray-700"
              }`}
            >
              Hosted URL*
            </label>
            <input
              type="url"
              id="hostedUrl"
              value={hostedUrl}
              onChange={(e) => setHostedUrl(e.target.value)}
              required
              className={inputClassName}
            />
          </div>
          <div>
            <label
              htmlFor="githubUrl"
              className={`block text-sm font-medium ${
                isDarkMode ? "text-gray-200" : "text-gray-700"
              }`}
            >
              GitHub URL
            </label>
            <input
              type="url"
              id="githubUrl"
              value={githubUrl}
              onChange={(e) => setGithubUrl(e.target.value)}
              className={inputClassName}
            />
          </div>
          <div>
            <label
              htmlFor="githubRepoName"
              className={`block text-sm font-medium ${
                isDarkMode ? "text-gray-200" : "text-gray-700"
              }`}
            >
              GitHub Repo Name
            </label>
            <input
              type="text"
              id="githubRepoName"
              value={githubRepoName}
              onChange={(e) => setGithubRepoName(e.target.value)}
              className={inputClassName}
            />
          </div>
          <div className="flex justify-end space-x-2">
            {project && (
              <button
                type="button"
                onClick={handleDelete}
                className="px-4 py-2 bg-red-500 text-white rounded-md text-sm font-medium hover:bg-red-600"
              >
                Delete
              </button>
            )}
            <button
              type="button"
              onClick={onClose}
              className={`px-4 py-2 rounded-md text-sm font-medium ${
                isDarkMode
                  ? "bg-gray-600 text-white hover:bg-gray-700"
                  : "bg-gray-200 text-gray-800 hover:bg-gray-300"
              }`}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded-md text-sm font-medium hover:bg-blue-600"
            >
              {project ? "Update" : "Add"} Project
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

================
File: src/components/AdminNav.js
================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { useTheme } from "../context/ThemeContext";

const AdminNav = () => {
  const pathname = usePathname();
  const { isDarkMode } = useTheme();

  const navItems = [
    { path: "/dashboard", label: "Dashboard" },
    { path: "/admin", label: "Admin Panel" },
    { path: "/netlify-projects", label: "Netlify Projects" },
  ];

  const isActive = (path) => pathname === path;

  return (
    <nav className={`py-4 ${isDarkMode ? "bg-gray-800" : "bg-gray-100"}`}>
      <div className="container mx-auto px-4">
        <ul className="flex space-x-4">
          {navItems.map((item) => (
            <li key={item.path}>
              <Link href={item.path}>
                <span
                  className={`px-3 py-2 rounded-md text-sm font-medium ${
                    isActive(item.path)
                      ? isDarkMode
                        ? "bg-gray-900 text-white"
                        : "bg-white text-gray-900"
                      : isDarkMode
                      ? "text-gray-300 hover:bg-gray-700 hover:text-white"
                      : "text-gray-700 hover:bg-gray-200 hover:text-gray-900"
                  } transition-colors duration-200`}
                >
                  {item.label}
                </span>
              </Link>
            </li>
          ))}
        </ul>
      </div>
    </nav>
  );
};

export default AdminNav;

================
File: src/components/AdminRoute.js
================
// src/components/AdminRoute.js
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "../context/AuthContext";

export default function AdminRoute({ children }) {
  const { user, loading, isAdmin } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && (!user || !isAdmin)) {
      router.push("/dashboard");
    }
  }, [user, loading, isAdmin, router]);

  if (loading) {
    return <div>Loading...</div>;
  }

  return isAdmin ? children : null;
}

================
File: src/components/Contact.js
================
import React, { useState } from "react";
import { useTheme } from "../context/ThemeContext";
import emailjs from "@emailjs/browser";

export default function Contact() {
  const { isDarkMode } = useTheme();
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });
  const [status, setStatus] = useState({
    submitted: false,
    submitting: false,
    info: { error: false, msg: null },
  });

  const handleInput = (e) => {
    const field = e.target.id;
    const value = e.target.value;
    setFormData((form) => ({ ...form, [field]: value }));
    setStatus({
      submitted: false,
      submitting: false,
      info: { error: false, msg: null },
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setStatus((prevStatus) => ({ ...prevStatus, submitting: true }));

    try {
      await emailjs.send(
        process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID, // Replace with your EmailJS service ID
        process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID,
        {
          from_name: formData.name,
          reply_to: formData.email,
          message: formData.message,
        },
        process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY
      );

      setStatus({
        submitted: true,
        submitting: false,
        info: { error: false, msg: "Message sent successfully!" },
      });
      setFormData({
        name: "",
        email: "",
        message: "",
      });
    } catch (error) {
      setStatus({
        submitted: false,
        submitting: false,
        info: {
          error: true,
          msg: "An error occurred. Please try again later.",
        },
      });
    }
  };

  return (
    <section
      id="contact"
      className={`py-20 ${isDarkMode ? "bg-gray-800" : "bg-white"}`}
    >
      <div className="container mx-auto px-6">
        <h2
          className={`text-3xl font-bold text-center mb-8 ${
            isDarkMode ? "text-white" : "text-gray-800"
          }`}
        >
          Get in Touch
        </h2>
        <div className="max-w-md mx-auto">
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label
                htmlFor="name"
                className={`block mb-2 text-sm font-medium ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}
              >
                Name
              </label>
              <input
                type="text"
                id="name"
                value={formData.name}
                onChange={handleInput}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  isDarkMode
                    ? "bg-gray-700 border-gray-600 text-white"
                    : "bg-white border-gray-300 text-gray-900"
                }`}
                required
              />
            </div>
            <div>
              <label
                htmlFor="email"
                className={`block mb-2 text-sm font-medium ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}
              >
                Email
              </label>
              <input
                type="email"
                id="email"
                value={formData.email}
                onChange={handleInput}
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  isDarkMode
                    ? "bg-gray-700 border-gray-600 text-white"
                    : "bg-white border-gray-300 text-gray-900"
                }`}
                required
              />
            </div>
            <div>
              <label
                htmlFor="message"
                className={`block mb-2 text-sm font-medium ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}
              >
                Message
              </label>
              <textarea
                id="message"
                value={formData.message}
                onChange={handleInput}
                rows="4"
                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  isDarkMode
                    ? "bg-gray-700 border-gray-600 text-white"
                    : "bg-white border-gray-300 text-gray-900"
                }`}
                required
              />
            </div>
            {status.info.error && (
              <div className="text-red-500 text-sm">{status.info.msg}</div>
            )}
            {status.submitted && !status.info.error && (
              <div className="text-green-500 text-sm">{status.info.msg}</div>
            )}
            <button
              type="submit"
              disabled={status.submitting}
              className={`w-full py-2 px-4 rounded-md ${
                isDarkMode
                  ? "bg-blue-600 text-white hover:bg-blue-700"
                  : "bg-blue-500 text-white hover:bg-blue-600"
              } transition duration-300 ${
                status.submitting ? "opacity-50 cursor-not-allowed" : ""
              }`}
            >
              {status.submitting ? "Sending..." : "Send Message"}
            </button>
          </form>
        </div>
      </div>
    </section>
  );
}

================
File: src/components/Education.js
================
import { useTheme } from "../context/ThemeContext";

export default function Education() {
  const { isDarkMode } = useTheme();
  const education = [
    {
      school: "Bogota Bootcamp",
      course: "Ruby On Rails Course",
      period: "Jan. 2020 to Apr. 2020",
    },
    {
      school: "Lambda School",
      course: "Certificate of Completion Web Development & Computer Science",
      period: "Feb. 2019 to Sept. 2019",
    },
    {
      school: "New York Code + Design Academy",
      course: "Web Development Foundation",
      period: "May 2018 to June 2018",
    },
  ];

  return (
    <section className={`py-20 ${isDarkMode ? "bg-gray-900" : "bg-gray-100"}`}>
      <div className="container mx-auto px-6">
        <h2
          className={`text-3xl font-bold text-center mb-8 ${
            isDarkMode ? "text-white" : "text-gray-800"
          }`}
        >
          Education
        </h2>
        <div className="space-y-8">
          {education.map((edu, index) => (
            <div
              key={index}
              className={`rounded-lg shadow-md p-6 ${
                isDarkMode ? "bg-gray-800" : "bg-white"
              }`}
            >
              <h3
                className={`font-bold text-xl mb-2 ${
                  isDarkMode ? "text-white" : "text-gray-800"
                }`}
              >
                {edu.school}
              </h3>
              <p
                className={`mb-2 ${
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                }`}
              >
                {edu.course}
              </p>
              <p
                className={`text-sm ${
                  isDarkMode ? "text-gray-400" : "text-gray-600"
                }`}
              >
                {edu.period}
              </p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/Experience.js
================
import { useTheme } from "../context/ThemeContext";

export default function Experience() {
  const { isDarkMode } = useTheme();
  const experiences = [
    {
      company: "Freelance",
      position: "React Developer",
      period: "July 2023 to Current",
      responsibilities: [
        "Creating new features, functionalities and capabilities on web app",
        "Improve quality of existing code and documentation",
        "Provide guidance and assistance to team members",
        "Leading the team in more test-drive development with Jest.js",
      ],
    },
    {
      company: "American Express",
      position: "Software Engineer III",
      period: "Oct. 2020 to Mar. 2022",
      responsibilities: [
        "Developing new user-facing features using React.js and Angular",
        "Building reusable cross platform components and front-end libraries for future use",
        "Translating designs and wireframes into high quality code",
        "Optimizing components for maximum performance across a vast array of web-capable devices and browsers",
      ],
    },
    {
      company: "Lambda School",
      position: "Team Lead, Full Stack Web Development & Computer Science",
      period: "May 2019 to Feb. 2020",
      responsibilities: [
        "Work closely with students on HTML5, CSS3, Javascript ES5/ES6, React js and Node js",
        "Manage a group of 7-10 students",
        "Mentor students to achieve good coding practices",
      ],
    },
  ];

  return (
    <section
      id="experience"
      className={`py-20 ${isDarkMode ? "bg-gray-800" : "bg-white"}`}
    >
      <div className="container mx-auto px-6">
        <h2
          className={`text-3xl font-bold text-center mb-8 ${
            isDarkMode ? "text-white" : "text-gray-800"
          }`}
        >
          Work Experience
        </h2>
        <div className="space-y-12">
          {experiences.map((exp, index) => (
            <div
              key={index}
              className={`border-l-4 ${
                isDarkMode ? "border-blue-500" : "border-blue-600"
              } pl-4`}
            >
              <h3
                className={`font-bold text-xl ${
                  isDarkMode ? "text-white" : "text-gray-800"
                }`}
              >
                {exp.company}
              </h3>
              <p
                className={`${
                  isDarkMode ? "text-gray-300" : "text-gray-600"
                } mb-2`}
              >
                {exp.position}
              </p>
              <p
                className={`text-sm ${
                  isDarkMode ? "text-gray-400" : "text-gray-500"
                } mb-4`}
              >
                {exp.period}
              </p>
              <ul className="list-disc list-inside">
                {exp.responsibilities.map((resp, respIndex) => (
                  <li
                    key={respIndex}
                    className={isDarkMode ? "text-gray-300" : "text-gray-700"}
                  >
                    {resp}
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/Footer.js
================
// src/components/Footer.js
import Link from "next/link";
import { useTheme } from "../context/ThemeContext";

export default function Footer() {
  const { isDarkMode } = useTheme();

  return (
    <footer
      className={`py-8 ${
        isDarkMode ? "bg-gray-900 text-white" : "bg-gray-800 text-white"
      }`}
    >
      <div className="container mx-auto px-6 text-center">
        <p>&copy; 2024 Irving Duran. All rights reserved.</p>
        <div className="mt-4 flex justify-center space-x-4">
          <a
            href="https://linkedin.com/in/irvingduran"
            target="_blank"
            rel="noopener noreferrer"
            className="hover:text-blue-400"
          >
            LinkedIn
          </a>
          <a
            href="https://github.com/fixmylifedesigns"
            target="_blank"
            rel="noopener noreferrer"
            className="hover:text-blue-400"
          >
            GitHub
          </a>
          <Link href="/login" className="hover:text-blue-400">
            Login
          </Link>
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/Header.js
================
import Link from "next/link";
import ToggleTheme from "./ToggleTheme";
import { useTheme } from "../context/ThemeContext";

export default function Header() {
  const { isDarkMode } = useTheme();

  return (
    <header
      className={`sticky top-0 z-10 ${
        isDarkMode ? "bg-gray-900 text-white" : "bg-white text-gray-800"
      }`}
    >
      <nav className="container mx-auto px-6 py-3 flex justify-between items-center">
        <Link href="/">
          <span className="font-bold text-xl">Irving Duran</span>
        </Link>
        <div className="flex items-center space-x-4">
          <Link href="#projects">
            <span className="hover:text-blue-500">Projects</span>
          </Link>
          <Link href="#skills">
            <span className="hover:text-blue-500">Skills</span>
          </Link>
          <Link href="#experience">
            <span className="hover:text-blue-500">Experience</span>
          </Link>
          <Link href="#contact">
            <span className="hover:text-blue-500">Contact</span>
          </Link>
          <ToggleTheme />
        </div>
      </nav>
    </header>
  );
}

================
File: src/components/Hero.js
================
import { useTheme } from "../context/ThemeContext";
import portrait from "@/data/images/portrait.jpg";
import Image from "next/image";

export default function Hero() {
  const { isDarkMode } = useTheme();

  return (
    <section
      className={`py-20 ${
        isDarkMode ? "bg-gray-1000 text-white" : "bg-blue-600 text-white"
      }`}
    >
      <div className="container mx-auto px-6 text-center">
        <div className="flex justify-center mb-6">
          <Image
            src={portrait}
            alt="Irving Duran"
            width={150}
            height={150}
            className="rounded-full border-4 border-white shadow-lg"
          />
        </div>
        <h1 className="text-4xl font-bold mb-2">Irving Duran</h1>
        <p className="text-xl mb-4">Full Stack Developer</p>
        <p className="mb-8">Based in Brooklyn, New York</p>
        <a
          href="#contact"
          className={`px-6 py-3 rounded-full font-bold ${
            isDarkMode
              ? "bg-blue-500 text-white hover:bg-blue-600"
              : "bg-white text-blue-600 hover:bg-blue-100"
          } transition duration-300`}
        >
          Get in Touch
        </a>
        <a
          href="#contact"
          className={`px-6 py-3 rounded-full font-bold ml-2 ${
            isDarkMode
              ? "bg-blue-500 text-white hover:bg-blue-600"
              : "bg-white text-blue-600 hover:bg-blue-100"
          } transition duration-300`}
        >
          Linkedin
        </a>
      </div>
    </section>
  );
}

================
File: src/components/ImportProjectModal.js
================
import React, { useState, useEffect } from "react";
import { useTheme } from "../context/ThemeContext";
import { database } from "../firebase/firebaseConfig";
import { ref, push, set } from "firebase/database";

const ImportProjectModal = ({ isOpen, onClose, customerId }) => {
  const [netlifyProjects, setNetlifyProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { isDarkMode } = useTheme();

  useEffect(() => {
    if (isOpen) {
      fetchNetlifyProjects();
    }
  }, [isOpen]);

  const fetchNetlifyProjects = async () => {
    try {
      const response = await fetch("/api/netlify-projects");
      if (!response.ok) {
        throw new Error("Failed to fetch Netlify projects");
      }
      const data = await response.json();
      console.log("Fetched Netlify projects:", data); // Debug log
      setNetlifyProjects(data);
      setLoading(false);
    } catch (err) {
      console.error("Error fetching Netlify projects:", err);
      setError(err.message);
      setLoading(false);
    }
  };

  const importProject = async (project) => {
    console.log("Importing project:", project); // Debug log
    try {
      const projectRef = push(ref(database, `projects/${customerId}`));
      const projectData = {
        netlifyId: project.id,
        name: project.name,
        url: project.url,
        screenshot: project.screenshot,
        repo_url: project.repo_url,
        repo_path: project.repo_path,
        admin_url: project.admin_url,
        created_at: project.created_at,
        updated_at: project.updated_at,
        framework: project.framework,
        branch: project.branch,
        deploy_url: project.deploy_url,
      };
      console.log("Project data to be imported:", projectData); // Debug log
      await set(projectRef, projectData);
      alert("Project imported successfully!");
      onClose();
    } catch (err) {
      console.error("Error importing project:", err);
      alert(`Failed to import project: ${err.message}`);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div
        className={`w-full max-w-md p-6 rounded-lg ${
          isDarkMode ? "bg-gray-800 text-white" : "bg-white text-gray-900"
        }`}
      >
        <h2 className="text-2xl font-bold mb-4">Import Netlify Project</h2>
        {loading && <p>Loading projects...</p>}
        {error && <p className="text-red-500">Error: {error}</p>}
        {!loading && !error && (
          <ul className="space-y-2">
            {netlifyProjects.map((project) => (
              <li
                key={project.id}
                className="flex justify-between items-center"
              >
                <span>{project.name}</span>
                <button
                  onClick={() => importProject(project)}
                  className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  Import
                </button>
              </li>
            ))}
          </ul>
        )}
        <button
          onClick={onClose}
          className="mt-4 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
        >
          Close
        </button>
      </div>
    </div>
  );
};

export default ImportProjectModal;

================
File: src/components/NetlifyProjects.js
================
import React, { useState, useEffect } from "react";
import { useTheme } from "../context/ThemeContext";
import { database } from "../firebase/firebaseConfig";
import { ref, push, set, remove, onValue } from "firebase/database";
import ProjectCard from "../components/ProjectCard";

const NetlifyProjects = ({ customerId = null }) => {
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { isDarkMode } = useTheme();

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        if (customerId) {
          // Fetch projects from Firebase for a specific customer
          const projectsRef = ref(database, `projects/${customerId}`);
          onValue(projectsRef, (snapshot) => {
            const data = snapshot.val();
            const projectList = data
              ? Object.entries(data).map(([id, project]) => ({
                  ...project,
                  id,
                }))
              : [];
            setProjects(projectList);
            setLoading(false);
          });
        } else {
          // Fetch all Netlify projects
          const response = await fetch("/api/netlify-projects");
          if (!response.ok) {
            throw new Error("Failed to fetch projects");
          }
          const data = await response.json();
          setProjects(data);
          setLoading(false);
        }
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchProjects();
  }, [customerId]);

  const importProject = async (project) => {
    if (!customerId) {
      alert("Cannot import project without a customer ID");
      return;
    }
    try {
      const projectRef = push(ref(database, `projects/${customerId}`));
      await set(projectRef, {
        id: project.id,
        name: project.name,
        url: project.url,
        screenshot: project.screenshot_url,
        repo_url: project.repo_url,
        repo_path: project.repo_path,
        admin_url: project.admin_url,
        created_at: project.created_at,
        updated_at: project.updated_at,
        framework: project.framework,
        branch: project.branch,
        deploy_url: project.deploy_url,
      });
      alert("Project imported successfully!");
    } catch (err) {
      console.error("Error importing project:", err);
      alert("Failed to import project. Please try again.");
    }
  };

  const deleteProject = async (projectId) => {
    if (!customerId) {
      alert("Cannot delete project without a customer ID");
      return;
    }
    if (window.confirm("Are you sure you want to delete this project?")) {
      try {
        await remove(ref(database, `projects/${customerId}/${projectId}`));
        alert("Project deleted successfully!");
      } catch (err) {
        console.error("Error deleting project:", err);
        alert("Failed to delete project. Please try again.");
      }
    }
  };

  if (loading) return <div>Loading projects...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className={`py-10 ${isDarkMode ? "bg-gray-900" : "bg-gray-100"}`}>
      <div className="container mx-auto px-4">
        <h2
          className={`text-3xl font-bold mb-6 ${
            isDarkMode ? "text-white" : "text-gray-800"
          }`}
        >
          {customerId ? "Customer Projects" : "Netlify Projects"}
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((project, key) => (
            <ProjectCard key={key} project={project} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default NetlifyProjects;

================
File: src/components/new/Background.js
================
import React, { useState, useEffect, useRef } from 'react';
import dynamic from 'next/dynamic';

// Create a dynamic import for the Background component
const Background = dynamic(() => Promise.resolve(() => {
  const mountRef = useRef(null);

  useEffect(() => {
    if (typeof window === 'undefined') return;

    // Import Three.js only on client side
    const THREE = require('three');
    let scene, camera, renderer;
    let uniforms;

    const init = () => {
      scene = new THREE.Scene();
      camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
      
      renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        alpha: true 
      });
      renderer.setSize(window.innerWidth, window.innerHeight);
      if (mountRef.current) {
        mountRef.current.appendChild(renderer.domElement);
      }

      const vertexShader = `
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = vec4(position, 1.0);
        }
      `;

      const fragmentShader = `
        uniform float time;
        uniform vec2 resolution;
        varying vec2 vUv;

        float random(vec2 st) {
          return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
        }

        void main() {
          vec2 st = gl_FragCoord.xy/resolution.xy;
          float noise = random(st + time * 0.1);
          gl_FragColor = vec4(vec3(noise * 0.1), 1.0);
        }
      `;

      uniforms = {
        time: { value: 0 },
        resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) }
      };

      const material = new THREE.ShaderMaterial({
        uniforms,
        vertexShader,
        fragmentShader
      });

      const geometry = new THREE.PlaneGeometry(2, 2);
      const mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);
    };

    const animate = () => {
      requestAnimationFrame(animate);
      if (uniforms) {
        uniforms.time.value += 0.01;
      }
      if (renderer && scene && camera) {
        renderer.render(scene, camera);
      }
    };

    init();
    animate();

    const handleResize = () => {
      if (renderer && uniforms) {
        renderer.setSize(window.innerWidth, window.innerHeight);
        uniforms.resolution.value.set(window.innerWidth, window.innerHeight);
      }
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      if (mountRef.current && renderer) {
        mountRef.current.removeChild(renderer.domElement);
        renderer.dispose();
      }
    };
  }, []);

  return <div ref={mountRef} className="fixed inset-0 -z-10 bg-black" />;
}), {
  ssr: false // This is important - disable server-side rendering for this component
});

export default Background;

================
File: src/components/new/FAQ.js
================
import { useState } from "react";
import { ChevronDown } from "lucide-react";

const FAQItem = ({ question, answer }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="border-b border-white/30">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="w-full py-4 flex justify-between items-center text-left hover:opacity-80"
      >
        <span className="text-lg">{question}</span>
        <ChevronDown
          className={`w-5 h-5 transition-transform ${
            isOpen ? "rotate-180" : ""
          }`}
        />
      </button>
      {isOpen && (
        <div className="pb-4 text-white/80 leading-relaxed">{answer}</div>
      )}
    </div>
  );
};

const FAQ = () => {
  const faqs = [
    {
      question: "Where are you based?",
      answer: "I am currently based in Brooklyn, New York.",
    },
    {
      question: "Are you open to relocating?",
      answer:
        "Yes, I am open to relocating anywhere in the United States and even globally for the right opportunity.",
    },
    {
      question: "Can you build full-stack applications from scratch?",
      answer:
        "Yes, I have extensive experience building full-stack applications from the ground up. I've worked with various tech stacks including React.js + Node.js, Ruby on Rails, and React on Rails. Currently, I prefer working with Next.js for its powerful features and excellent developer experience.",
    },
    {
      question: "What is your preferred tech stack?",
      answer:
        "My preferred tech stack is Next.js for its robust features including server-side rendering, API routes, and excellent developer experience. I'm also well-versed in modern frontend technologies like React, Tailwind CSS, and TypeScript.",
    },
    {
      question: "What type of projects have you worked on?",
      answer:
        "I've worked on a diverse range of projects including e-commerce platforms, content management systems, real-time applications, and enterprise-level web applications. Each project has helped me develop a deep understanding of different business domains and technical challenges.",
    },
    {
      question: "Are you available for remote work?",
      answer:
        "Yes, I have extensive experience working remotely and am comfortable with remote collaboration tools and asynchronous communication.",
    },
  ];

  return (
    <div className="p-8 text-white">
      <header className="mb-16">
        <h1 className="text-2xl font-light tracking-wide mb-2">FAQ</h1>
        <p className="text-sm tracking-wide opacity-75">
          Frequently Asked Questions
        </p>
      </header>

      <div className="max-w-2xl space-y-2">
        {faqs.map((faq, index) => (
          <FAQItem key={index} question={faq.question} answer={faq.answer} />
        ))}
      </div>
    </div>
  );
};

export default FAQ;

================
File: src/components/new/landing.js
================
import React, { useState, useEffect } from "react";
import { Loader2 } from "lucide-react";
import Background from "./Background";
import FAQ from "./FAQ";

const ExperienceCard = () => {
  const experiences = [
    {
      company: "Match Hat",
      role: "Software Engineer",
      period: "Oct 2024 - Present",
      location: "Kyoto, Japan / Remote",
    },
    {
      company: "Freelance Software Engineer",
      role: "Software Engineer",
      period: "May 2023 - Present",
      location: "Remote",
    },
    {
      company: "American Express",
      role: "Software Engineer II",
      period: "Oct 2020 - May 2023",
      location: "New York City / Remote",
    },
  ];

  const techStack = [
    "JavaScript ES6+",
    "React.js",
    "Node.js",
    "TypeScript",
    "Next.js",
    "GraphQL",
    "React Native",
    "Tailwind CSS",
  ];

  return (
    <div className="p-8 text-white">
      <header className="mb-16">
        <h1 className="text-2xl font-light tracking-wide mb-2">Experience</h1>
        <p className="text-sm tracking-wide opacity-75">Professional Journey</p>
      </header>

      <div className="max-w-lg">
        <div className="mb-12">
          {experiences.map((exp, index) => (
            <div key={index} className="mb-8 border-l border-white/30 pl-6">
              <h3 className="font-light text-xl mb-2">{exp.company}</h3>
              <p className="text-sm tracking-wide opacity-75 mb-1">
                {exp.role}
              </p>
              <p className="text-sm tracking-wide opacity-75">
                {exp.period} | {exp.location}
              </p>
            </div>
          ))}
        </div>

        <div className="mb-8">
          <h3 className="text-xl font-light tracking-wide mb-4">Tech Stack</h3>
          <div className="flex flex-wrap gap-3">
            {techStack.map((tech, index) => (
              <span
                key={index}
                className="border border-white/30 px-3 py-1 text-sm tracking-wide"
              >
                {tech}
              </span>
            ))}
          </div>
        </div>

        <button
          onClick={() => window.open("/Resumeirvingduran.pdf")}
          className="border border-white px-6 py-2 hover:bg-white hover:text-black transition-colors"
        >
          Download CV
        </button>
      </div>
    </div>
  );
};

const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });

  const [status, setStatus] = useState({
    loading: false,
    success: false,
    error: null,
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setStatus({ loading: true, success: false, error: null });

    try {
      const response = await fetch("/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to send message");
      }

      setStatus({ loading: false, success: true, error: null });
      setFormData({ name: "", email: "", message: "" }); // Reset form

      // Show success message for 3 seconds
      setTimeout(() => {
        setStatus((prev) => ({ ...prev, success: false }));
      }, 3000);
    } catch (error) {
      setStatus({ loading: false, success: false, error: error.message });
    }
  };

  return (
    <div className="p-8 text-white">
      <header className="mb-16">
        <h1 className="text-2xl font-light tracking-wide mb-2">Contact</h1>
        <p className="text-sm tracking-wide opacity-75">Get in touch</p>
      </header>

      <form onSubmit={handleSubmit} className="max-w-lg">
        <div className="mb-6">
          <label htmlFor="name" className="block text-sm mb-2">
            Name
          </label>
          <input
            id="name"
            name="name"
            type="text"
            required
            value={formData.name}
            onChange={handleChange}
            className="w-full bg-transparent border border-white/30 p-2 text-white focus:border-white outline-none"
          />
        </div>

        <div className="mb-6">
          <label htmlFor="email" className="block text-sm mb-2">
            Email
          </label>
          <input
            id="email"
            name="email"
            type="email"
            required
            value={formData.email}
            onChange={handleChange}
            className="w-full bg-transparent border border-white/30 p-2 text-white focus:border-white outline-none"
          />
        </div>

        <div className="mb-6">
          <label htmlFor="message" className="block text-sm mb-2">
            Message
          </label>
          <textarea
            id="message"
            name="message"
            rows="4"
            required
            value={formData.message}
            onChange={handleChange}
            className="w-full bg-transparent border border-white/30 p-2 text-white focus:border-white outline-none"
          ></textarea>
        </div>

        <button
          type="submit"
          disabled={status.loading}
          className="border border-white px-6 py-2 hover:bg-white hover:text-black transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
        >
          {status.loading ? (
            <>
              <Loader2 className="w-4 h-4 animate-spin" />
              Sending...
            </>
          ) : (
            "Send Message"
          )}
        </button>

        {/* Status Messages */}
        {status.error && (
          <p className="mt-4 text-red-400 text-sm">Error: {status.error}</p>
        )}

        {status.success && (
          <p className="mt-4 text-green-400 text-sm">
            Message sent successfully!
          </p>
        )}
      </form>
    </div>
  );
};

const MainContent = ({ onNavigate }) => (
  <div className="p-8 text-white m-auto relative">
    {/* Bio section for mobile - shown at top on mobile, hidden on desktop */}
    <div className="md:hidden mb-12">
      <p className="text-sm leading-relaxed tracking-wide">
        Born in 1993
        <br />
        in Brooklyn, New York.
        <br />
        <br />
        Creating stuff was my escape
        <br />
        from the world. My love
        <br />
        for building and making Art
        <br />
        eventually lead me to want
        <br />
        to learn how to build
        <br />
        and create with code.
      </p>
    </div>

    <header className="mb-16">
      <h1 className="text-2xl font-light tracking-wide mb-2">
        Irving Jose Duran
      </h1>
      <p className="text-sm tracking-wide opacity-75">Full Stack Engineer</p>
    </header>

    <nav className="mb-16">
      <ul className="space-y-2">
        <li
          key={0}
          className="flex items-center space-x-2 opacity-50 hover:opacity-100 transition-opacity"
        >
          <span className="text-xs">●</span>
          <a
            href="https://www.linkedin.com/in/irvingduran"
            className="text-sm tracking-wide"
          >
            Linkedin
          </a>
        </li>
        {["Info", "Contact", "FAQ"].map((item) => (
          <li
            key={item}
            className="flex items-center space-x-2 opacity-50 hover:opacity-100 transition-opacity"
          >
            <span className="text-xs">●</span>
            <button
              onClick={() => onNavigate(item.toLowerCase())}
              className="text-sm tracking-wide"
            >
              {item}
            </button>
          </li>
        ))}
      </ul>
    </nav>

    {/* Bio section for desktop - hidden on mobile, shown on desktop */}
    <div className="hidden md:block absolute top-8 right-8 max-w-xs text-right">
      <p className="text-sm leading-relaxed tracking-wide">
        Born in 1993
        <br />
        in Brooklyn, New York.
        <br />
        <br />
        Creating stuff was my escape
        <br />
        from the world. My love
        <br />
        for building and making Art
        <br />
        eventually lead me to want
        <br />
        to learn how to build
        <br />
        and create with code.
      </p>
    </div>
  </div>
);

const Portfolio = () => {
  const [theme, setTheme] = useState("dark");
  const [currentPath, setCurrentPath] = useState("main");
  const [isEntering, setIsEntering] = useState(true);
  const [fontStyle, setFontStyle] = useState("normal");
  const [isFlipped, setIsFlipped] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setIsEntering(false), 1000);
    return () => clearTimeout(timer);
  }, []);

  const handleNavigation = (path) => {
    setIsFlipped(true);
    setTimeout(() => {
      setCurrentPath(path);
      setTimeout(() => {
        setIsFlipped(false);
      }, 50);
    }, 500);
  };

  const goBack = () => {
    setIsFlipped(true);
    setTimeout(() => {
      setCurrentPath("main");
      setTimeout(() => {
        setIsFlipped(false);
      }, 50);
    }, 500);
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      {isEntering && (
        <div className="fixed inset-0 bg-black z-50 flex flex-col items-center justify-center text-white">
          <div className="text-2xl tracking-wide opacity-90">
            Irving Jose Duran
          </div>
          <div className="text-base tracking-wide opacity-75">Loading ...</div>
        </div>
      )}

      <Background />

      <div className="flip-card w-full max-w-6xl flex items-center">
        <div className={`flip-card-inner  ${isFlipped ? "is-flipped" : ""}`}>
          <div className="flip-card-front border border-white relative ">
            {currentPath === "main" ? (
              <MainContent onNavigate={handleNavigation} />
            ) : (
              <div className="relative">
                <button
                  onClick={goBack}
                  className="absolute top-4 right-4 text-white/70 hover:text-white text-sm"
                >
                  Close
                </button>
                {currentPath === "contact" && <ContactForm />}
                {currentPath === "info" && <ExperienceCard />}

                {currentPath === "faq" && <FAQ />}
              </div>
            )}

            {/* Theme Toggles */}
            {currentPath === "main" && (
              <div className="absolute bottom-8 right-8 z-10 flex items-center space-x-6 text-xs text-white">
                {/* <div className="flex items-center space-x-4">
                <button
                  onClick={() => setTheme("light")}
                  className={`theme-btn ${
                    theme === "light" ? "opacity-100" : "opacity-50"
                  }`}
                >
                  <span className="block w-2 h-2 bg-white mb-1"></span>
                  Light
                </button>
                <button
                  onClick={() => setTheme("dark")}
                  className={`theme-btn ${
                    theme === "dark" ? "opacity-100" : "opacity-50"
                  }`}
                >
                  <span className="block w-2 h-2 bg-white mb-1"></span>
                  Dark
                </button>
              </div> */}
                <button
                  onClick={() =>
                    setFontStyle((f) => (f === "normal" ? "mono" : "normal"))
                  }
                  className={`theme-btn ${
                    fontStyle === "mono" ? "opacity-100" : "opacity-50"
                  }`}
                >
                  <span className="block w-2 h-2 bg-white mb-1"></span>
                  Monospaced
                </button>
              </div>
            )}
          </div>
          <div className="flip-card-front p-8 text-white/50 border-t border-white/10">
            <div className="max-w-5xl mx-auto flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
              <div className="flex flex-col">
                <p className="text-sm tracking-wide mb-2">Projects</p>
                <div className="flex gap-4 text-xs">
                  <a
                    href="https://github.com/fixmylifedesigns"
                    className="hover:text-white transition-colors"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    GitHub
                  </a>
                </div>
              </div>

              <div className="flex flex-col">
                <p className="text-sm tracking-wide mb-2">Connect</p>
                <div className="flex gap-4 text-xs">
                  <a
                    href="https://www.linkedin.com/in/irvingduran"
                    className="hover:text-white transition-colors"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    LinkedIn
                  </a>
                  <a
                    href="mailto:contact@duranirving.com"
                    className="hover:text-white transition-colors"
                  >
                    Email
                  </a>
                </div>
              </div>

              <div className="flex flex-col md:text-right">
                <p className="text-sm tracking-wide mb-2">Location</p>
                <p className="text-xs">Brooklyn, NY</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <style jsx global>{`
        @import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500&display=swap");

        body {
          font-family: ${fontStyle === "mono" ? "monospace" : "Inter"},
            sans-serif;
          background: black;
          margin: 0;
          padding: 0;
        }

        .flip-card {
          perspective: 1000px;
          min-height: 600px;
        }

        .flip-card-inner {
          position: relative;
          width: 100%;
          height: 100%;
          text-align: left;
          transition: transform 0.6s;
          transform-style: preserve-3d;
        }

        .flip-card-inner.is-flipped {
          transform: rotateX(180deg);
        }

        .flip-card-front {
          position: relative;
          width: 100%;
          height: 100%;
          backface-visibility: hidden;
          -webkit-backface-visibility: hidden;
        }

        .theme-btn {
          display: inline-flex;
          flex-direction: column;
          align-items: center;
          transition: opacity 0.3s ease;
        }
      `}</style>
    </div>
  );
};

export default Portfolio;

================
File: src/components/ProjectCard.js
================
// src/components/ProjectCard.js
import React from "react";
import { useTheme } from "../context/ThemeContext";
import { deleteProject } from "../firebase/projectOperations";

const ProjectCard = ({ project, customerId }) => {
  const { isDarkMode } = useTheme();

  return (
    <div
      key={project.id}
      className={`rounded-lg shadow-md p-6 ${
        isDarkMode ? "bg-gray-800 text-white" : "bg-white text-gray-800"
      }`}
    >
      <h3 className="text-xl font-semibold mb-2">{project.name}</h3>
      {project.screenshot && (
        <img
          src={project.screenshot}
          alt={project.name}
          className="w-full h-40 object-cover mb-4"
        />
      )}
      <p className="mb-4">{project.url}</p>
      <p className="mb-2">Framework: {project.framework || "N/A"}</p>
      <p className="mb-2">Branch: {project.branch || "N/A"}</p>
      <div className="flex flex-wrap gap-2 mt-4">
        <a
          href={project.url}
          target="_blank"
          rel="noopener noreferrer"
          className={`inline-block px-4 py-2 rounded ${
            isDarkMode
              ? "bg-blue-600 hover:bg-blue-700"
              : "bg-blue-500 hover:bg-blue-600"
          } text-white transition-colors duration-200`}
        >
          Visit Site
        </a>
        {project.repo_url && (
          <a
            href={project.repo_url}
            target="_blank"
            rel="noopener noreferrer"
            className={`inline-block px-4 py-2 rounded ${
              isDarkMode
                ? "bg-gray-600 hover:bg-gray-700"
                : "bg-gray-500 hover:bg-gray-600"
            } text-white transition-colors duration-200`}
          >
            View Repo
          </a>
        )}
        {customerId && (
          <button
            onClick={() => deleteProject({ projectId: project.id, customerId })}
            className={`inline-block px-4 py-2 rounded ${
              isDarkMode
                ? "bg-red-600 hover:bg-red-700"
                : "bg-red-500 hover:bg-red-600"
            } text-white transition-colors duration-200`}
          >
            Delete
          </button>
        )}
      </div>
    </div>
  );
};

export default ProjectCard;

================
File: src/components/Projects.js
================
import React from "react";
import Link from "next/link";
import { useTheme } from "../context/ThemeContext";
import projectsData from "../data/projectData.json";

export default function Projects({ limit }) {
  const { isDarkMode } = useTheme();
  const displayedProjects = limit
    ? projectsData.filter((project) => project.display === 1).slice(0, limit)
    : projectsData.filter((project) => project.display === 1);

  return (
    <section
      id="projects"
      className={`py-20 ${isDarkMode ? "bg-gray-800" : "bg-gray-100"}`}
    >
      <div className="container mx-auto px-6">
        <h2
          className={`text-3xl font-bold text-center mb-8 ${
            isDarkMode ? "text-white" : "text-gray-800"
          }`}
        >
          Recent Projects
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {displayedProjects.map((project) => (
            <div
              key={project.title}
              className={`rounded-lg shadow-md overflow-hidden ${
                isDarkMode ? "bg-gray-700" : "bg-white"
              }`}
            >
              <div className="relative h-48">
                <img
                  src={project.img}
                  alt={project.title}
                  className="w-full h-full object-cover"
                />
              </div>
              <div className="p-6">
                <h3
                  className={`font-bold text-xl mb-2 ${
                    isDarkMode ? "text-white" : "text-gray-800"
                  }`}
                >
                  {project.title}
                </h3>
                <p
                  className={`${
                    isDarkMode ? "text-white" : "text-gray-800"
                  } mb-4`}
                >
                  {project.description}
                </p>
                <div className="flex flex-wrap gap-2">
                  {project.website && (
                    <a
                      href={project.website}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="bg-blue-500 text-white px-4 py-2 rounded-md text-sm hover:bg-blue-600 transition duration-300"
                    >
                      Website
                    </a>
                  )}
                  {project.repo && (
                    <a
                      href={project.repo}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="bg-gray-800 text-white px-4 py-2 rounded-md text-sm hover:bg-gray-900 transition duration-300"
                    >
                      Repo
                    </a>
                  )}
                  {project.api && (
                    <a
                      href={project.api}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="bg-green-500 text-white px-4 py-2 rounded-md text-sm hover:bg-green-600 transition duration-300"
                    >
                      API
                    </a>
                  )}
                  {project.demo && (
                    <a
                      href={project.demo}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="bg-purple-500 text-white px-4 py-2 rounded-md text-sm hover:bg-purple-600 transition duration-300"
                    >
                      Demo
                    </a>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
        {limit &&
          projectsData.filter((project) => project.display === 1).length >
            limit && (
            <div className="mt-12 text-right">
              <Link href="/projects">
                <span
                  className={`px-6 py-3 rounded-md text-lg font-semibold ${
                    isDarkMode
                      ? "bg-blue-600 text-white hover:bg-blue-700"
                      : "bg-blue-500 text-white hover:bg-blue-600"
                  } transition duration-300`}
                >
                  View All Projects
                </span>
              </Link>
            </div>
          )}
      </div>
    </section>
  );
}

================
File: src/components/ProtectedRoute.js
================
// src/components/ProtectedRoute.js
"use client";
import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "../context/AuthContext";

export default function ProtectedRoute({ children }) {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push("/login");
    }
  }, [user, loading, router]);

  if (loading) {
    return <div>Loading...</div>;
  }

  return user ? children : null;
}

================
File: src/components/Skills.js
================
import { useTheme } from '../context/ThemeContext';

export default function Skills() {
  const { isDarkMode } = useTheme();
  const skills = [
    "JavaScript ES5/ES6", "React.js", "Node.js", "Next.js", "Angular",
    "Python", "Ruby on Rails", "SQL Databases", "RESTful APIs",
    "Git & GitHub", "Agile Development"
  ];

  return (
    <section id="skills" className={`py-20 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
      <div className="container mx-auto px-6">
        <h2 className={`text-3xl font-bold text-center mb-8 ${isDarkMode ? 'text-white' : 'text-gray-800'}`}>Skills</h2>
        <div className="flex flex-wrap justify-center gap-4">
          {skills.map((skill, index) => (
            <span key={index} className={`px-3 py-1 rounded-full text-sm ${
              isDarkMode 
                ? 'bg-gray-700 text-white' 
                : 'bg-gray-200 text-gray-800'
            }`}>
              {skill}
            </span>
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/ToggleTheme.js
================
'use client'
// src/components/ToggleTheme.js
import React from "react";
import { useTheme } from "../context/ThemeContext";

export default function ToggleTheme() {
  const { isDarkMode, toggleTheme } = useTheme();

  return (
    <button
      onClick={toggleTheme}
      className={`p-2 rounded-full ${
        isDarkMode
          ? "bg-yellow-400 text-gray-900"
          : "bg-gray-800 text-yellow-400"
      }`}
    >
      {isDarkMode ? "🌞" : "🌙"}
    </button>
  );
}

================
File: src/components/UserProjects.js
================
// src/components/UserProjects.js
import { useState, useEffect } from "react";
import { useAuth } from "../context/AuthContext";
import { database } from "../firebase/firebaseConfig";
import { ref, onValue, remove, get } from "firebase/database";

export default function UserProjects() {
  const [projects, setProjects] = useState([]);
  const { user, isAdmin } = useAuth();

  useEffect(() => {
    if (user) {
      const projectsRef = isAdmin
        ? ref(database, "projects")
        : ref(database, `projects/${user.uid}`);
      const unsubscribe = onValue(projectsRef, async (snapshot) => {
        const data = snapshot.val();
        if (isAdmin) {
          const projectList = [];
          for (const [userId, userProjects] of Object.entries(data)) {
            for (const [projectId, project] of Object.entries(userProjects)) {
              const customerRef = ref(
                database,
                `customers/${project.customerId}`
              );
              const customerSnapshot = await get(customerRef);
              const customer = customerSnapshot.val();
              projectList.push({
                id: projectId,
                userId,
                ...project,
                customer,
              });
            }
          }
          setProjects(projectList);
        } else {
          const projectList = data
            ? Object.entries(data).map(([id, value]) => ({ id, ...value }))
            : [];
          setProjects(projectList);
        }
      });

      return () => unsubscribe();
    }
  }, [user, isAdmin]);

  const handleDelete = async (projectId, userId = user.uid) => {
    if (window.confirm("Are you sure you want to delete this project?")) {
      try {
        await remove(ref(database, `projects/${userId}/${projectId}`));
      } catch (error) {
        console.error("Error deleting project:", error);
        alert("Failed to delete project. Please try again.");
      }
    }
  };

  return (
    <div>
      <h2>{isAdmin ? "All Projects" : "Your Projects"}</h2>
      {projects.map((project) => (
        <div key={project.id}>
          <h3>{project.name}</h3>
          <p>{project.description}</p>
          <a href={project.hostedUrl} target="_blank" rel="noopener noreferrer">
            View Project
          </a>
          <a href={project.githubUrl} target="_blank" rel="noopener noreferrer">
            GitHub
          </a>
          {isAdmin && (
            <p>Customer: {project.customer ? project.customer.name : "N/A"}</p>
          )}
          <button
            onClick={() =>
              handleDelete(project.id, isAdmin ? project.userId : undefined)
            }
          >
            Delete
          </button>
        </div>
      ))}
    </div>
  );
}

================
File: src/context/AuthContext.js
================
// src/context/AuthContext.js
"use client";
import { createContext, useContext, useState, useEffect } from "react";
import { auth, database } from "../firebase/firebaseConfig";
import { onAuthStateChanged } from "firebase/auth";
import { ref, get } from "firebase/database";

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      setUser(user);
      if (user) {
        try {
          const adminRef = ref(database, `admins/${user.uid}`);
          const snapshot = await get(adminRef);
          setIsAdmin(snapshot.val() === true);
        } catch (error) {
          console.error("Error checking admin status:", error);
          setIsAdmin(false);
        }
      } else {
        setIsAdmin(false);
      }
      setLoading(false);
    });

    return unsubscribe;
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading, isAdmin }}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => useContext(AuthContext);

================
File: src/context/ThemeContext.js
================
'use client'
// src/context/ThemeContext.js
import React, { createContext, useState, useContext, useEffect } from "react";

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(false);

  useEffect(() => {
    const savedTheme = localStorage.getItem("theme");
    setIsDarkMode(savedTheme === "dark");
  }, []);

  const toggleTheme = () => {
    const newTheme = !isDarkMode;
    setIsDarkMode(newTheme);
    localStorage.setItem("theme", newTheme ? "dark" : "light");
  };

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);

================
File: src/data/projectData.json
================
[
  {
    "display": 1,
    "title": "Kanji Study",
    "website": "https://angular.fmlcycling.com/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/kanjistudy.png?raw=true",
    "description": "Kanji Study app for practicing n5 Japanese Kanji",
    "repo": "https://github.com/fixmylifedesigns/Kanji-study"
  },
  {
    "display": 1,
    "title": "JLPT Jokes",
    "website": "https://jlptjokes.com/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/jlptjokes.png?raw=true",
    "description": "Website for japanese langage learns. Learn Japanese through jokes and puns",
    "repo": "https://github.com/fixmylifedesigns/jlptjokes"
  },
  {
    "display": 1,
    "title": "Nihongo With Moeno",
    "website": "https://nihongowithmoeno.com/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/moeno.png?raw=true",
    "description": "Kanji Study app for practicing n5 Japanese Kanji",
    "repo": "https://github.com/fixmylifedesigns/nihongowithmoeno"
  },
  {
    "display": 1,
    "title": "Angular E-com Store",
    "website": "https://angular.fmlcycling.com/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/angularfml.PNG?raw=true",
    "description": "Rebuilt my E-commerce shop in Angular. Using the my e-commerce backend platform and alot of the css from my previous ReactJs build. fmlcycling.com",
    "repo": "https://github.com/fixmylifedesigns/fmlshopangular",
    "api": "https://documenter.getpostman.com/view/7133880/T17JA7YV?version=latest",
    "demo": "https://www.linkedin.com/posts/irvingduran_so-i-started-working-on-a-project-with-angular-activity-6701652240777715712-Fc4B"
  },
  {
    "display": 1,
    "title": "Fmlcycling E-com Store",
    "website": "https://www.fmlcycling.com/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/fmlcycling.png?raw=true",
    "description": "Independent Project, E-commerce Website built for personal business. Connected to my e-commerce platform and taking payments with paypal.",
    "repo": "https://github.com/fixmylifeShop/fixmylife-frontend",
    "api": "https://documenter.getpostman.com/view/7133880/T17JA7YV?version=latest",
    "demo": "https://www.linkedin.com/posts/irvingduran_showing-progress-on-my-ecom-platform-and-activity-6664327616700391424-wrRM"
  },
  {
    "display": 1,
    "title": "E-commerce Platform",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/ecomplatform.png?raw=true",
    "description": "Independent Project, E-commerce platform with backend that allows users to connect Frontend of their choice for there online store.",
    "repo": "https://github.com/fixmylifeShop/",
    "api": "https://documenter.getpostman.com/view/7133880/T17JA7YV?version=latest",
    "demo": "https://www.linkedin.com/posts/irvingduran_just-a-quick-update-on-the-procress-today-activity-6666913058713026560-zJmE"
  },
  {
    "display": 1,
    "title": "Carpool App",
    "website": "https://carpoolapp.netlify.app/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/carpool.png?raw=true",
    "description": "Independent Project, Web application that alows users to create an account and make new rides and accept to carpool with other drivers.",
    "repo": "https://github.com/fixmylifedesigns/carpoolappfrontend",
    "api": "https://documenter.getpostman.com/view/7133880/SWECWFKD?version=latest"
  },
  {
    "display": 1,
    "title": "Broken U-Lock",
    "website": "https://www.brokenulock.com",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/ulock.png?raw=true",
    "description": "Independent Project, Web application that alows users to create an account and make posts to report stolen bicycles. Work in progress.",
    "repo": "https://github.com/brokenulock",
    "api": "https://documenter.getpostman.com/view/7133880/SVfMUAdJ?version=latest",
    "demo": "https://youtu.be/xDORl-csvqU"
  },
  {
    "display": 1,
    "title": "Intelliflight",
    "website": "https://www.intelliflight.app/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/intelliflight.png?raw=true",
    "description": "Team Project, tasked to create a web application that allows pilots to create pireps and route plans.",
    "repo": "https://github.com/labs13-intelliflight",
    "api": "https://documenter.getpostman.com/view/7133880/S1TYVGJp?version=latest",
    "demo": "https://youtu.be/7UVnwE1ntwc"
  },

  {
    "display": 0,
    "title": "Next Js Boilerplate",
    "website": "https://fixmylife-next-api.herokuapp.com/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/nextboilerplate.png?raw=true",
    "description": "Next Js Boilerplate easy for new developers who want to make an amazing project quickly. Also great for developers who don't know backend.",
    "repo": "https://github.com/fixmylife-boilerplates",
    "api": "https://documenter.getpostman.com/view/7133880/SVfQRUJX?version=latest",
    "tutorial": "https://youtu.be/RnbW-0t9ixY"
  },

  {
    "display": 1,
    "title": "React Native Map",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/reactnativelocation.PNG?raw=true",
    "description": "React Native map using built in gps to show your current location while also showing markers coming in from endpoints",
    "repo": "https://github.com/fixmylifedesigns/react-native-location"
  },

  {
    "display": 1,
    "title": "Firebase Image Uploader",
    "website": "https://firebaseuploader.netlify.app",
    "description": "Tutorial on using firebase to save images to their server and receive a url in return.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/firebaselogin.png?raw=true",
    "repo": "https://github.com/fixmylifedesigns/firebase_uploader",
    "tutorial": "https://youtu.be/34f_SO7SWVA"
  },

  {
    "display": 1,
    "title": "Geo-Location Map",
    "website": "https://reactlocation.netlify.app/",
    "description":"Demo react app using geo-location and google maps to render a map that shows the users current location and seeded data.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/geolocation.png?raw=true",
    "repo": "https://github.com/fixmylifedesigns/googlemaps-geolocation",
    "demo": "https://youtu.be/reFElyEkXPg"
  },
  {
    "display": 1,
    "title": "Yisag Tattoo",
    "website": "https://yisag.netlify.app/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/yisag.png?raw=true",
    "description": "Project for a client tasked to build a website for his business that met his designs and needs.",
    "repo": "https://github.com/fixmylifedesigns/yisagbogota"
  },
  {
    "display": 1,
    "title": "RVNB",
    "website": "https://rvnb.netlify.app",
    "description":"Team Lead, Lead a team of students in the development of a react app that allows users to create view and rent land listings, perfect for RV.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/rvnb.png?raw=true",
    "repo": "https://github.com/RV-camping-Airbnb",
    "api": "https://documenter.getpostman.com/view/7133880/SVn2NFKn?version=latest"
  },

  {
    "display": 1,
    "title": "Lambda Time",
    "website": "https://lambdatime.netlify.app",
    "description":"React js game that connects to Lambdaschool servers. The game allows a player to travel through a map in search for travel and mining coins.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/lambdatime.png?raw=true",
    "repo": "https://github.com/build-week-2/Adventure-Time"
  },

  {
    "display": 1,
    "title": "Lambda Road Trip",
    "website": "https://lambdaroadtrip.netlify.app",
    "description":"Frontend React Developer, tasked to make the frontend for a roadtrip travel game.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/roadtrip.png?raw=true",
    "repo": "https://github.com/lambda-mud",
    "api": "https://documenter.getpostman.com/view/7133880/SVYnSgct?version=latest"
  },

  {
    "display": 1,
    "title": "Tabless Thursday",
    "website": "https://tabless-thursday-landing-1.netlify.app",
    "description":"Backend Developer, tasked to create a that allows users to create and login into their account where they can post edit and delete tabs.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/tabless.png?raw=true",
    "repo": "https://github.com/tabless-tt",
    "api": "https://documenter.getpostman.com/view/7133880/S1TN7gjq?version=latest#941ab1ee-82cc-4c96-8d4b-9052eb0c85fb"
  },

  {
    "display": 1,
    "title": "Educell",
    "website": "https://educell-marketing.netlify.app/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/educell.png?raw=true",
    "description": "UI developer, tasked to create a marketing page for a web application.",
    "repo": "https://github.com/build-week-educell/marketing-page"
  },
  {
    "display": 1,
    "title": "React Pokedex",
    "website": "https://fixmydex.netlify.app",
    "description": "React app using open source api to render all the pokemon and their information.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/fixmydex.png?raw=true",
    "repo": "https://github.com/fixmylifedesigns/fixmydex"
  },
  {
    "display": 1,
    "title": "React Wars",
    "website": "https://reactmylife.netlify.app/",
    "description":"Lambda school sprint challenged tasked to render star wars data from an open source api.",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/reactwars.png?raw=true",
    "repo": "https://github.com/fixmylifedesigns/Sprint-Challenge-React-Wars"
  },

  {
    "display": 0,
    "title": "Artfolio",
    "website": "https://art-folio.netlify.app/",
    "img": "https://github.com/fixmylifedesigns/reactjs-portfolio/blob/master/src/images/projects/artfolio.png?raw=true",
    "description": "Frontend React Developer, tasked to create a web application that allows free users to view post and logged in users to publish and share their work",
    "repo": "https://github.com/lambda-art-portfolio/frontend/tree/master"
  }
]

================
File: src/firebase/firebaseAdmin.js
================
// src/firebase/firebaseAdmin.js
import admin from "firebase-admin";

if (!admin.apps.length) {
  try {
    admin.initializeApp({
      credential: admin.credential.cert({
        projectId: process.env.FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, "\n"),
      }),
      databaseURL: process.env.FIREBASE_DATABASE_URL,
    });
    console.log("Firebase Admin initialized successfully");
  } catch (error) {
    console.error("Firebase admin initialization error", error.stack);
  }
}

export default admin;

================
File: src/firebase/firebaseConfig.js
================
// src/firebase/firebaseConfig.js
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getDatabase } from "firebase/database";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const database = getDatabase(app);

================
File: src/firebase/projectOperations.js
================
// src/firebase/projectOperations.js
import { db, auth, database } from "./firebaseConfig";
import {
  collection,
  addDoc,
  getDocs,
  query,
  where,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";

import { ref, onValue, remove } from "firebase/database";

export const addProject = async (userId, projectData) => {
  try {
    const docRef = await addDoc(collection(db, "projects"), {
      userId,
      ...projectData,
      createdAt: new Date(),
    });
    return docRef.id;
  } catch (error) {
    console.error("Error adding project: ", error);
    throw error;
  }
};

export const getUserProjects = async (userId) => {
  try {
    const q = query(collection(db, "projects"), where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("Error getting user projects: ", error);
    throw error;
  }
};

export const deleteProject = async ({ projectId, customerId }) => {
  if (window.confirm("Are you sure you want to delete this project?")) {
    try {
      await remove(ref(database, `projects/${customerId}/${projectId}`));
      alert("Project deleted successfully!");
    } catch (error) {
      console.error("Error deleting project:", error);
    }
  }
};

export const updateProject = async (projectId, updatedData) => {
  try {
    await updateDoc(doc(db, "projects", projectId), updatedData);
  } catch (error) {
    console.error("Error updating project: ", error);
    throw error;
  }
};

================
File: src/middleware.js
================
// src/middleware.js
import { NextResponse } from "next/server";

export function middleware(request) {
  const response = NextResponse.next();

  // Add CORS headers
  response.headers.set("Access-Control-Allow-Origin", "*"); // Or specify allowed origins
  response.headers.set(
    "Access-Control-Allow-Methods",
    "GET, POST, PUT, DELETE, OPTIONS"
  );
  response.headers.set(
    "Access-Control-Allow-Headers",
    "Content-Type, X-User-ID"
  );

  return response;
}

export const config = {
  matcher: "/api/:path*",
};

================
File: src/utils/adminUtils.js
================
// src/utils/adminUtils.js

export const isAdmin = (user) => {
  if (!user || !user.email) return false;

  const adminEmails = process.env.NEXT_PUBLIC_ADMIN_EMAILS?.split(",") || [];
  return adminEmails.includes(user.email.toLowerCase());
};

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};

================
File: text.txt
================
{
  "rules": {
    "projects": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "customers": {
      ".read": "auth != null",
      ".write": "auth != null"
    }
  }
}



{
  "rules": {
    "projects": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() === true",
      ".write": "auth != null && root.child('admins').child(auth.uid).val() === true",
      "$uid": {
        ".read": "$uid === auth.uid || root.child('admins').child(auth.uid).val() === true",
        ".write": "$uid === auth.uid || root.child('admins').child(auth.uid).val() === true"
      }
    },
    "customers": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() === true",
      ".write": "auth != null && root.child('admins').child(auth.uid).val() === true"
    },
    "admins": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() === true",
      ".write": "auth != null && root.child('admins').child(auth.uid).val() === true"
    }
  }
}
